datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// next-auth schema
model Account {
  id                String  @id @default(uuid())
  userId            String  @unique
  type              String  
  provider          String  
  providerAccountId String  
  refresh_token     String? @db.LongText
  access_token      String? @db.LongText
  expires_at        Int?    
  token_type        String? 
  scope             String? 
  id_token          String? @db.LongText
  session_state     String? 
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String   
  expires      DateTime 
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?   
  emailVerified DateTime? 
  image         String?   
 
  accounts Account[]
  sessions Session[]
  deployments Deployment[]
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
 
  @@map("users")
}
 
model VerificationToken {
  identifier String   
  token      String   @unique
  expires    DateTime 
 
  @@unique([identifier, token])
}

model Environment {
  id                  String      @id @default(uuid())
  name                String
  currentDeployment   Deployment? @relation(fields: [currentDeploymentId], references: [id])
  currentDeploymentId String      @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Deployment {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  branchName  String
  environment Environment?
  deployedAt  DateTime @default(now())
}
